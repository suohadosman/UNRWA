// <auto-generated />
using System;
using IUNRWA_Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IUNRWARepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IUNRWA_Model.Entity.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.AreaPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaPlaces");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ChildCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("ChildCards");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ChildCardMeasurementResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfMeasurement")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<float>("Result")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChildCardId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("ChildCardMeasurementResults");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Dose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DoseOrder")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Doses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FamilyRegestrationCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("FamilyRegestrationCards");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollowUpLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfDone")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FollowUpLabTestType")
                        .HasColumnType("int");

                    b.Property<int>("FollwUpVisitId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<bool?>("PNResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<float?>("Result")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FollwUpVisitId");

                    b.HasIndex("LabTestId");

                    b.ToTable("followUpLabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollowUpLateComplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FollwUpVisitId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LateComplicationId")
                        .HasColumnType("int");

                    b.Property<int?>("NCDCardId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FollwUpVisitId");

                    b.HasIndex("LateComplicationId");

                    b.HasIndex("NCDCardId");

                    b.ToTable("FollowUpLateComplication");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollwUpVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NCDCardId")
                        .HasColumnType("int");

                    b.Property<int>("NCDNurseId")
                        .HasColumnType("int");

                    b.Property<bool>("TypeOfFollwUp")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NCDCardId");

                    b.HasIndex("NCDNurseId");

                    b.ToTable("FollwUpVisits");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.HealthCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaPlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AreaPlaceId");

                    b.ToTable("HealthCenters");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IllnessTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IllnessTypeId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.IllnessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("IllnessTypes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ImmunizationProgrammeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChildCardId");

                    b.HasIndex("ImmunizationProgrammeId");

                    b.ToTable("ImmunizationDates");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationDateSideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ImmunizationDateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SideEffectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ImmunizationDateId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("ImmunizationDateSideEffects");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AgeOfChild")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoseId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoseId");

                    b.HasIndex("VaccineId");

                    b.ToTable("ImmunizationProgrammes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvaliable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabTestResultType")
                        .HasColumnType("int");

                    b.Property<int>("LabTestTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxNormalResult")
                        .HasColumnType("double");

                    b.Property<double?>("MinNormalResult")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("NormalResultValue")
                        .HasColumnType("double");

                    b.Property<bool?>("PNNormalResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LabTestTypeId");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LabTestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("labTestTypes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LateComplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("LateComplications");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.MedicinPreview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int?>("NCDCardId")
                        .HasColumnType("int");

                    b.Property<int>("PreviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("NCDCardId");

                    b.HasIndex("PreviewId");

                    b.ToTable("MedicinPreviews");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MedicineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineTypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.MedicineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.NCDCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Diabetes")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<bool>("Pressure")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sensitive")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("NCDCards");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.OriginPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OriginPlaces");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PersonMeasurementResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfMeasurement")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FollwUpVisitId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviewId")
                        .HasColumnType("int");

                    b.Property<float?>("Result")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FollwUpVisitId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PreviewId");

                    b.ToTable("PersonMeasurementResults");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Preview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Previews");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PreviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("PreviewId");

                    b.ToTable("PreviewComplaints");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewIllness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IllnessId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PreviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("PreviewId");

                    b.ToTable("PreviewIllnesses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfDone")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<bool?>("PNResult")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PreviewId")
                        .HasColumnType("int");

                    b.Property<float?>("Result")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.HasIndex("PreviewId");

                    b.ToTable("PreviewLabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Relatioship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClerickId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("NCDNurseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClerickId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NCDNurseId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.StudyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("StudyLevels");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.TheMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TheMeasurements");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.TimeSlote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TimeSlotes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CildCardId")
                        .HasColumnType("int");

                    b.Property<int?>("ClerickId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirthday")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FamilyCardId")
                        .HasColumnType("int");

                    b.Property<int?>("FatherId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ForceDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVaild")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("MaritalStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int>("OriginAdressId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<int>("StudyLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAddressId");

                    b.HasIndex("FamilyCardId");

                    b.HasIndex("FatherId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OriginAdressId");

                    b.HasIndex("OriginPlaceId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("StudyLevelId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Clerick", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Clericks");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Doctor", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.MeasurementNurse", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("MeasurementNurses");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.NCDNurse", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("NCDNurse");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Pharmacist", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Pharmacists");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Tester", b =>
                {
                    b.HasBaseType("IUNRWA_Model.UNRWAUsers.User");

                    b.Property<int>("HealthCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasIndex("HealthCenterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.AreaPlace", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.Area", "Area")
                        .WithMany("AreaPlaces")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ChildCard", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithOne("CildCard")
                        .HasForeignKey("IUNRWA_Model.Entity.ChildCard", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ChildCardMeasurementResult", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.ChildCard", "ChildCard")
                        .WithMany("ChildCardMeasurementResults")
                        .HasForeignKey("ChildCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.TheMeasurement", "Measurement")
                        .WithMany("ChildCardMeasurementResults")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildCard");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollowUpLabTest", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.FollwUpVisit", "FollwUpVisit")
                        .WithMany("LabTests")
                        .HasForeignKey("FollwUpVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.LabTest", "LabTest")
                        .WithMany("FollowUpLabTests")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollwUpVisit");

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollowUpLateComplication", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.FollwUpVisit", "FollwUpVisit")
                        .WithMany()
                        .HasForeignKey("FollwUpVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.LateComplication", "LateComplication")
                        .WithMany("FollowUpVisits")
                        .HasForeignKey("LateComplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.NCDCard", null)
                        .WithMany("NCDDiagnoses")
                        .HasForeignKey("NCDCardId");

                    b.Navigation("FollwUpVisit");

                    b.Navigation("LateComplication");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollwUpVisit", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.NCDCard", "NCDCard")
                        .WithMany("FollwUpVisits")
                        .HasForeignKey("NCDCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.NCDNurse", "NCDNurse")
                        .WithMany()
                        .HasForeignKey("NCDNurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NCDCard");

                    b.Navigation("NCDNurse");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.HealthCenter", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.AreaPlace", "AreaPlace")
                        .WithMany("HealthCenters")
                        .HasForeignKey("AreaPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaPlace");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Illness", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.IllnessType", "IllnessType")
                        .WithMany("Illnesses")
                        .HasForeignKey("IllnessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IllnessType");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationDate", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.ChildCard", "ChildCard")
                        .WithMany("ImmunizationDates")
                        .HasForeignKey("ChildCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.ImmunizationProgramme", "ImmunizationProgramme")
                        .WithMany("ImmunizationDates")
                        .HasForeignKey("ImmunizationProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildCard");

                    b.Navigation("ImmunizationProgramme");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationDateSideEffect", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.ImmunizationDate", "ImmunizationDate")
                        .WithMany("ImmunizationDateSideEffects")
                        .HasForeignKey("ImmunizationDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.SideEffect", "SideEffect")
                        .WithMany("ImmunizationDateSideEffects")
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImmunizationDate");

                    b.Navigation("SideEffect");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationProgramme", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.Dose", "Dose")
                        .WithMany("ImmunizationProgrammes")
                        .HasForeignKey("DoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Vaccine", "Vaccine")
                        .WithMany("ImmunizationProgrammes")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dose");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LabTest", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.LabTestType", "LabTestType")
                        .WithMany("LabTests")
                        .HasForeignKey("LabTestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTestType");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.MedicinPreview", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.Medicine", "Medicine")
                        .WithMany("MedicinPreviews")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.NCDCard", "NCDCard")
                        .WithMany("MedicinePreviews")
                        .HasForeignKey("NCDCardId");

                    b.HasOne("IUNRWA_Model.Entity.Preview", "Preview")
                        .WithMany("MedicinPreviews")
                        .HasForeignKey("PreviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("NCDCard");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Medicine", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineType");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.NCDCard", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithOne("NCDCard")
                        .HasForeignKey("IUNRWA_Model.Entity.NCDCard", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PersonMeasurementResult", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.FollwUpVisit", "FollwUpVisit")
                        .WithMany()
                        .HasForeignKey("FollwUpVisitId");

                    b.HasOne("IUNRWA_Model.Entity.TheMeasurement", "Measurement")
                        .WithMany("IndividualMeasurementResults")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany("IndividualMeasurementResults")
                        .HasForeignKey("PersonId");

                    b.HasOne("IUNRWA_Model.Entity.Preview", "Preview")
                        .WithMany()
                        .HasForeignKey("PreviewId");

                    b.Navigation("FollwUpVisit");

                    b.Navigation("Measurement");

                    b.Navigation("Person");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Preview", b =>
                {
                    b.HasOne("IUNRWA_Model.UNRWAUsers.Doctor", "Doctor")
                        .WithMany("Previews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Patient")
                        .WithMany("Previews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Reservation", "Reservation")
                        .WithMany("Previews")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewComplaint", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.Complaint", "Complaint")
                        .WithMany("PreviewComplaints")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Preview", "Preview")
                        .WithMany("PreviewComplaints")
                        .HasForeignKey("PreviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewIllness", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.Illness", "Illness")
                        .WithMany("PreviewIllnesses")
                        .HasForeignKey("IllnessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Preview", "Preview")
                        .WithMany("PreviewIllnesses")
                        .HasForeignKey("PreviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.PreviewLabTest", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.LabTest", "LabTest")
                        .WithMany("PreviewLabTests")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Preview", "Preview")
                        .WithMany("LabTests")
                        .HasForeignKey("PreviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("Preview");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Reservation", b =>
                {
                    b.HasOne("IUNRWA_Model.UNRWAUsers.Clerick", "Clerick")
                        .WithMany()
                        .HasForeignKey("ClerickId");

                    b.HasOne("IUNRWA_Model.UNRWAUsers.Doctor", "Doctor")
                        .WithMany("Reservations")
                        .HasForeignKey("DoctorId");

                    b.HasOne("IUNRWA_Model.UNRWAUsers.NCDNurse", "NCDNurse")
                        .WithMany("Reservations")
                        .HasForeignKey("NCDNurseId");

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany("Reservations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Service", "Service")
                        .WithMany("Reservations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clerick");

                    b.Navigation("Doctor");

                    b.Navigation("NCDNurse");

                    b.Navigation("Person");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.person", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.AreaPlace", "CurrentAddress")
                        .WithMany()
                        .HasForeignKey("CurrentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.FamilyRegestrationCard", "FamilyCard")
                        .WithMany("People")
                        .HasForeignKey("FamilyCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Father")
                        .WithMany("Children")
                        .HasForeignKey("FatherId");

                    b.HasOne("IUNRWA_Model.Entity.Nationality", "Nationality")
                        .WithMany("People")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.AreaPlace", "OriginAdress")
                        .WithMany()
                        .HasForeignKey("OriginAdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.OriginPlace", null)
                        .WithMany("People")
                        .HasForeignKey("OriginPlaceId");

                    b.HasOne("IUNRWA_Model.Entity.Relationship", "Relationship")
                        .WithMany("People")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.StudyLevel", "StudyLevel")
                        .WithMany("People")
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAddress");

                    b.Navigation("FamilyCard");

                    b.Navigation("Father");

                    b.Navigation("Nationality");

                    b.Navigation("OriginAdress");

                    b.Navigation("Relationship");

                    b.Navigation("StudyLevel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Clerick", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany("Clericks")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Clerick", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithOne("Clerick")
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Clerick", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany("Clericks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Doctor", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany("Doctors")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithOne("Doctor")
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany("Doctors")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.MeasurementNurse", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.MeasurementNurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.NCDNurse", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.NCDNurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Pharmacist", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Pharmacist", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Tester", b =>
                {
                    b.HasOne("IUNRWA_Model.Entity.HealthCenter", "HealthCenter")
                        .WithMany()
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.UNRWAUsers.User", null)
                        .WithOne()
                        .HasForeignKey("IUNRWA_Model.UNRWAUsers.Tester", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IUNRWA_Model.Entity.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCenter");

                    b.Navigation("Person");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Area", b =>
                {
                    b.Navigation("AreaPlaces");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.AreaPlace", b =>
                {
                    b.Navigation("HealthCenters");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ChildCard", b =>
                {
                    b.Navigation("ChildCardMeasurementResults");

                    b.Navigation("ImmunizationDates");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Complaint", b =>
                {
                    b.Navigation("PreviewComplaints");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Dose", b =>
                {
                    b.Navigation("ImmunizationProgrammes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FamilyRegestrationCard", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.FollwUpVisit", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.HealthCenter", b =>
                {
                    b.Navigation("Clericks");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Illness", b =>
                {
                    b.Navigation("PreviewIllnesses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.IllnessType", b =>
                {
                    b.Navigation("Illnesses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationDate", b =>
                {
                    b.Navigation("ImmunizationDateSideEffects");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.ImmunizationProgramme", b =>
                {
                    b.Navigation("ImmunizationDates");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LabTest", b =>
                {
                    b.Navigation("FollowUpLabTests");

                    b.Navigation("PreviewLabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LabTestType", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.LateComplication", b =>
                {
                    b.Navigation("FollowUpVisits");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Medicine", b =>
                {
                    b.Navigation("MedicinPreviews");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.NCDCard", b =>
                {
                    b.Navigation("FollwUpVisits");

                    b.Navigation("MedicinePreviews");

                    b.Navigation("NCDDiagnoses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Nationality", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.OriginPlace", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Preview", b =>
                {
                    b.Navigation("LabTests");

                    b.Navigation("MedicinPreviews");

                    b.Navigation("PreviewComplaints");

                    b.Navigation("PreviewIllnesses");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Relationship", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Reservation", b =>
                {
                    b.Navigation("Previews");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Service", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.SideEffect", b =>
                {
                    b.Navigation("ImmunizationDateSideEffects");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.StudyLevel", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Team", b =>
                {
                    b.Navigation("Clericks");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.TheMeasurement", b =>
                {
                    b.Navigation("ChildCardMeasurementResults");

                    b.Navigation("IndividualMeasurementResults");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.Vaccine", b =>
                {
                    b.Navigation("ImmunizationProgrammes");
                });

            modelBuilder.Entity("IUNRWA_Model.Entity.person", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CildCard");

                    b.Navigation("Clerick");

                    b.Navigation("Doctor");

                    b.Navigation("IndividualMeasurementResults");

                    b.Navigation("NCDCard");

                    b.Navigation("Previews");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.Doctor", b =>
                {
                    b.Navigation("Previews");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("IUNRWA_Model.UNRWAUsers.NCDNurse", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
